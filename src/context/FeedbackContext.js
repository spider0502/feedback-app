import { createContext, useState, useEffect } from "react"
//import FeedbackData from "../data/FeedbackData"
//import { v4 as v4uuid } from 'uuid'

const FeedbackContext = createContext()

export const FeedbackProvider = ({ children }) => {
    const [isLoading, setIsLoading] = useState(true)
    const [feedback, setFeedback] = useState([])
    const [feedbackEdit, setFeedbackEdit] = useState({
        item: {},
        edit: false,
    })

    useEffect(() => {
        fetchFeedback()
    }, [])

    //Fetch feedbacl from backend
    const fetchFeedback = async () => {
        const res = await fetch(`/feedback?_sort=id&_order=desc`)
        const data = await res.json()

        setFeedback(data)
        setIsLoading(false)
    }

    //Delete feedback
    const handleDelete = async (id) => {
        if (window.confirm('Are you sure you want to delete?')) {
            await fetch(`/feedback/${id}`, { method: 'DELETE' })

            setFeedback(feedback.filter((item) => item.id !== id))
        }
    }

    //Add feedback
    const handleAdd = async (newFeedback) => {
        const res = await fetch('/feedback', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newFeedback)
        })

        const data = await res.json()

        //Id is auto generated by json-server
        //newFeedback.id = v4uuid()
        setFeedback([data, ...feedback])
    }

    //Set item to be edited
    const handleEdit = (item) => {
        setFeedbackEdit({
            item,
            edit: true
        })
    }

    //Update feedback item
    const handleUpdate = async (id, updItem) => {
        const res = await fetch(`/feedback/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updItem)
        })
        const data = await res.json()

        setFeedback(feedback.map(item => item.id === id ? { ...item, ...data } : item))
    }

    return <FeedbackContext.Provider value={{
        feedback,
        feedbackEdit,
        isLoading,
        handleDelete,
        handleAdd,
        handleEdit,
        handleUpdate,
    }}>
        {children}
    </FeedbackContext.Provider>
}

export default FeedbackContext